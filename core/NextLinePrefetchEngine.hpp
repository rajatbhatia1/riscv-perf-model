#pragma once

#include "sparta/memory/AddressTypes.hpp"
#include "sparta/utils/FastList.hpp"
#include "PrefetchEngineIF.hpp"

namespace olympia {
  /*!
   * \class NextLinePrefetchEngine
   * \brief Example code for next line prefetch engine.
   *
   * This class implements a next line prefetcher engine. It generates 'n' next cache line prefetches per memory access
   * Both number of cache line generated and cache line size are constructor configurable
   *
   * Any previous prefetches generated will be cleared off when next set of prefetcher accesses are geneareted
   */
  class NextLinePrefetchEngine: public PrefetchEngineIF<>
  {
    public:
    /*!
     * \brief Construct a NextLinePrefetchEngine instance
     * \param num_lines_to_prefetch Number of cache line prefetches generated per acceess provided in handleMemoryAccess()
     * \param cache_line_size Size of cache line (in bytes)
     * 
     */
    NextLinePrefetchEngine(unsigned int num_lines_to_prefetch = 1, unsigned int cache_line_size = 64);

    /*!
     * \brief checks if prefetch is ready
     * \return Returns true if one or more prefetches are ready, false otherwise
     *
     */
    bool isPrefetchReady() const override;

    /*!
     * \brief input memory access to prefetcher
     * \param access Const reference to MemoryAccessInfoPtr
     * \return Always returns true
     */
    bool handleMemoryAccess(const MemoryAccessInfoPtr &access) override;

    /*!
     * \brief get next prefetch access
     * \return MemoryAccessInfoPtr containing the prefetch address
     *
     * This function will assert if no prefetches are available.
     *
     * Calls to this function should be guarded by isPrefetchReady() in the same clock cycle
     *
     * Returned MemoryAccessInfoPtr fields are a copy of the request MemoryAccessInfoPtr fields.
     * 
     */
    const MemoryAccessInfoPtr getPrefetchMemoryAccess() const override;

    /*!
     * \brief Remove the first prefetch  memory access
     * This method should be called immediately after the access is copied by getPrefetchMemoryAccess()
     */
    void popPrefetchMemoryAccess() override;

  private:
    const uint64_t num_lines_to_prefetch_; //! Number of prefetcher lines to generate 
    const uint64_t cache_line_size_; //! size of cache line in bytes

    sparta::utils::FastList<MemoryAccessInfoPtr> prefetch_queue_; //! queue to hold prefetches generated by last memory access
  };


}
